model User {
    id               Int     @id @default(autoincrement())
    userName         String
    email            String  @unique
    password         String?
    role             String  @default("User")
    bio              String  @default("")
    active           Boolean @default(false)
    canResetPassword Boolean @default(false)
    subscribed       Boolean @default(false)

    // Relations
    resetPassowrdTokens ResetPasswordToken[]
    activateTokens      ActivateToken[]

    favMovies   UserMovieFavorite[]
    favSeries   UserSerieFavorite[]
    favGenres   UserGenreFavorite[]
    favSeasons  UserSeasonFavorite[]
    favEpisodes UserEpisodeFavorite[]
    favActors   UserActorFavorite[]
    favCrew     UserCrewFavorite[]

    ratingsInMovie   UserMovieRating[]
    ratingsInSerie   UserSerieRating[]
    ratingsInSeason  UserSeasonRating[]
    ratingsInEpisode UserEpisodeRating[]
    ratingsInActor   UserActorRating[]
    ratingsInCrew    UserCrewRating[]

    movieReviews   MovieReview[]
    serieReviews   SerieReview[]
    seasonReviews  SeasonReview[]
    episodeReviews EpisodeReview[]
    actorReviews   ActorReview[]
    crewReviews    CrewReview[]

    movieReviewsUpvoted   UpvoteMovieReview[]
    movieReviewsDownvoted DownvoteMovieReview[]

    serieReviewsUpvoted   UpvoteSerieReview[]
    serieReviewsDownvoted DownvoteSerieReview[]

    seasonReviewsUpvoted   UpvoteSeasonReview[]
    seasonReviewsDownvoted DownvoteSeasonReview[]

    episodeReviewsUpvoted   UpvoteEpisodeReview[]
    episodeReviewsDownvoted DownvoteEpisodeReview[]

    actorReviewsUpvoted   UpvoteActorReview[]
    actorReviewsDownvoted DownvoteActorReview[]

    crewReviewsUpvoted   UpvoteCrewReview[]
    crewReviewsDownvoted DownvoteCrewReview[]

    avatar Avatar?

    followers UserFollow[] @relation("UserFollowing")
    following UserFollow[] @relation("UserFollowers")

    inboxs           UserInbox[]
    messagesSent     Message[]   @relation("Sender")
    messagesReceived Message[]   @relation("Reciever")

    accounts Account[]
    sessions Session[]

    notificationsReceived Notification[] @relation("NotificationReceiver")
    notificationsSent     Notification[] @relation("NotificationSender")
}

model ActivateToken {
    id          Int       @id @default(autoincrement())
    token       String    @unique
    createdAt   DateTime  @default(now())
    activatedAt DateTime?

    // FK Keys
    userId Int

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ResetPasswordToken {
    id              Int       @id @default(autoincrement())
    token           String    @unique
    createdAt       DateTime  @default(now())
    resetPasswordAt DateTime?

    // FK Keys
    userId Int

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Avatar {
    id       Int    @id @default(autoincrement())
    photoSrc String

    // FK Keys
    userId Int @unique

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserFollow {
    id    Int    @id @default(autoincrement())
    state String

    // FK Keys
    followerId  Int
    followingId Int

    // Relations
    follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([followerId, followingId])
}

model UserInbox {
    id Int @id @default(autoincrement())

    // FK Keys
    userId  Int
    inboxId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    inbox Inbox @relation(fields: [inboxId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, inboxId])
}

model Inbox {
    id Int @id @default(autoincrement())

    // Relations
    participants UserInbox[]
    messages     Message[]
}

model Message {
    id        Int       @id @default(autoincrement())
    text      String
    createdAt DateTime  @default(now())
    read      Boolean   @default(false)
    editedAt  DateTime?

    // FK Keys
    senderId   Int
    receiverId Int
    inboxId    Int

    // Relations
    receiver User @relation("Reciever", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    sender   User @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    inbox Inbox @relation(fields: [inboxId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([senderId, receiverId, inboxId])
}

model UserMovieRating {
    id     Int   @id @default(autoincrement())
    rating Float

    // FK Keys
    userId  Int
    movieId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, movieId])
}

model UserSerieRating {
    id     Int   @id @default(autoincrement())
    rating Float

    // FK Keys
    userId  Int
    serieId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    serie Serie @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, serieId])
}

model UserSeasonRating {
    id     Int   @id @default(autoincrement())
    rating Float

    // FK Keys
    userId   Int
    seasonId Int

    // Relations
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    season Season @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, seasonId])
}

model UserEpisodeRating {
    id     Int   @id @default(autoincrement())
    rating Float

    // FK Keys
    userId    Int
    episodeId Int

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    episode Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, episodeId])
}

model UserActorRating {
    id     Int   @id @default(autoincrement())
    rating Float

    // FK Keys
    userId  Int
    actorId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    actor Actor @relation(fields: [actorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, actorId])
}

model UserCrewRating {
    id     Int   @id @default(autoincrement())
    rating Float

    // FK Keys
    userId Int
    crewId Int

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    crew Crew @relation(fields: [crewId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, crewId])
}

model UserMovieFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId  Int
    movieId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, movieId])
}

model UserGenreFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId  Int
    genreId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    genre Genre @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, genreId])
}

model UserSerieFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId  Int
    serieId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    serie Serie @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, serieId])
}

model UserEpisodeFavorite {
    id Int @id @default(autoincrement())

    // FK Keys 
    userId    Int
    episodeId Int

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    episode Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, episodeId])
}

model UserSeasonFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId   Int
    seasonId Int

    // Relations
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    season Season @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, seasonId])
}

model UserActorFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId  Int
    actorId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    actor Actor @relation(fields: [actorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, actorId])
}

model UserCrewFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId Int
    crewId Int

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    crew Crew @relation(fields: [crewId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, crewId])
}

model Notification {
    id        Int      @id @default(autoincrement())
    type      String
    content   String?
    status    String   @default("unread")
    createdAt DateTime @default(now())

    // FK Keys
    userId   Int
    senderId Int

    // Relations
    user   User @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)
    sender User @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)

    @@unique([userId, senderId])
}
