model ForumPost {
    id          Int       @id @default(autoincrement())
    content     String    @db.Text()
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt
    isEdited    Boolean   @default(false)
    editCount   Int       @default(0)
    lastEditAt  DateTime?
    isModerated Boolean   @default(false)
    slug        String    @unique

    // FK Keys
    topicId Int
    userId  Int

    // Relations
    attachments Attachment[] 
    topic     ForumTopic          @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user      User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    replies   ForumReply[]
    upvotes   UpvoteForumPost[]
    downvotes DownvoteForumPost[]

    @@index([createdAt])
    @@index([isModerated]) // Add this for moderation queries
}

model Attachment {
    id          Int      @id @default(autoincrement())
    filename    String   // Original filename
    fileUrl     String   // Storage URL
    fileSize    Int      // Size in bytes
    mimeType    String   // File type (e.g., "image/jpeg", "application/pdf")
    uploadedAt  DateTime @default(now())
    isPublic    Boolean  @default(true)
    description String?  @db.Text()

    // FK Keys
    postId Int
    userId Int

    // Relations
    post User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    user ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@index([uploadedAt])
    @@index([mimeType])
}

model UpvoteForumPost {
    id Int @id @default(autoincrement())

    // FK Keys
    userId Int
    postId Int

    // Relations
    user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
}

model DownvoteForumPost {
    id Int @id @default(autoincrement())

    // FK Keys
    userId Int
    postId Int

    // Relations
    user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
}
