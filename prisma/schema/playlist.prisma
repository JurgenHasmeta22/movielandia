enum PlaylistType {
    Custom
    Watchlist
    Favorites
    Watched
}

enum PlaylistActionType {
    Created
    Updated
    Deleted
    ItemAdded
    ItemRemoved
    Shared
    Unshared
}

model Playlist {
    id           Int          @id @default(autoincrement())
    name         String
    description  String?      @db.Text()
    type         PlaylistType
    isPrivate    Boolean      @default(false)
    isArchived   Boolean      @default(false)
    isDefault    Boolean      @default(false)
    itemCount    Int          @default(0)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    lastViewedAt DateTime?

    // FK Keys
    userId Int

    // Relations
    user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
    movieItems        PlaylistMovie[]
    serieItems        PlaylistSerie[]
    seasonItems       PlaylistSeason[]
    episodeItems      PlaylistEpisode[]
    actorItems        PlaylistActor[]
    crewItems         PlaylistCrew[]
    sharedWith        PlaylistShare[]
    movieActivities   PlaylistActivityMovie[]
    serieActivities   PlaylistActivitySerie[]
    seasonActivities  PlaylistActivitySeason[]
    episodeActivities PlaylistActivityEpisode[]
    actorActivities   PlaylistActivityActor[]
    crewActivities    PlaylistActivityCrew[]

    @@index([userId])
    @@index([type])
    @@index([createdAt])
    @@index([isDefault])
}

model PlaylistShare {
    id       Int      @id @default(autoincrement())
    canEdit  Boolean  @default(false)
    sharedAt DateTime @default(now())

    // FK Keys
    playlistId Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([playlistId, userId])
}

model PlaylistMovie {
    id         Int      @id @default(autoincrement())
    addedAt    DateTime @default(now())
    note       String?  @db.Text()
    orderIndex Int      @default(0)

    // FK Keys
    playlistId Int
    movieId    Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    movie    Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
    user     User     @relation("AddedByUser", fields: [userId], references: [id])

    @@unique([playlistId, movieId])
    @@index([playlistId, orderIndex])
}

model PlaylistSerie {
    id         Int      @id @default(autoincrement())
    addedAt    DateTime @default(now())
    note       String?  @db.Text()
    orderIndex Int      @default(0)

    // FK Keys
    playlistId Int
    serieId    Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    serie    Serie    @relation(fields: [serieId], references: [id], onDelete: Cascade)
    user     User     @relation("AddedBySerieUser", fields: [userId], references: [id])

    @@unique([playlistId, serieId])
    @@index([playlistId, orderIndex])
}

model PlaylistSeason {
    id         Int      @id @default(autoincrement())
    addedAt    DateTime @default(now())
    note       String?  @db.Text()
    orderIndex Int      @default(0)

    // FK Keys
    playlistId Int
    seasonId   Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    season   Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
    user     User     @relation("AddedBySeasonUser", fields: [userId], references: [id])

    @@unique([playlistId, seasonId])
    @@index([playlistId, orderIndex])
}

model PlaylistEpisode {
    id         Int      @id @default(autoincrement())
    addedAt    DateTime @default(now())
    note       String?  @db.Text()
    orderIndex Int      @default(0)

    // FK Keys
    playlistId Int
    episodeId  Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    episode  Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
    user     User     @relation("AddedByEpisodeUser", fields: [userId], references: [id])

    @@unique([playlistId, episodeId])
    @@index([playlistId, orderIndex])
}

model PlaylistActor {
    id         Int      @id @default(autoincrement())
    addedAt    DateTime @default(now())
    note       String?  @db.Text()
    orderIndex Int      @default(0)

    // FK Keys
    playlistId Int
    actorId    Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    actor    Actor    @relation(fields: [actorId], references: [id], onDelete: Cascade)
    user     User     @relation("AddedByActorUser", fields: [userId], references: [id])

    @@unique([playlistId, actorId])
    @@index([playlistId, orderIndex])
}

model PlaylistCrew {
    id         Int      @id @default(autoincrement())
    addedAt    DateTime @default(now())
    note       String?  @db.Text()
    orderIndex Int      @default(0)

    // FK Keys
    playlistId Int
    crewId     Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    crew     Crew     @relation(fields: [crewId], references: [id], onDelete: Cascade)
    user     User     @relation("AddedByCrewUser", fields: [userId], references: [id])

    @@unique([playlistId, crewId])
    @@index([playlistId, orderIndex])
}

model PlaylistActivityMovie {
    id         Int                @id @default(autoincrement())
    actionType PlaylistActionType
    metadata   Json?
    createdAt  DateTime           @default(now())

    // FK Keys
    playlistId Int
    movieId    Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    movie    Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([playlistId, createdAt])
    @@index([userId, createdAt])
}

model PlaylistActivitySerie {
    id         Int                @id @default(autoincrement())
    actionType PlaylistActionType
    metadata   Json?
    createdAt  DateTime           @default(now())

    // FK Keys
    playlistId Int
    serieId    Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    serie    Serie    @relation(fields: [serieId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([playlistId, createdAt])
    @@index([userId, createdAt])
}

model PlaylistActivitySeason {
    id         Int                @id @default(autoincrement())
    actionType PlaylistActionType
    metadata   Json?
    createdAt  DateTime           @default(now())

    // FK Keys
    playlistId Int
    seasonId   Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    season   Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([playlistId, createdAt])
    @@index([userId, createdAt])
}

model PlaylistActivityEpisode {
    id         Int                @id @default(autoincrement())
    actionType PlaylistActionType
    metadata   Json?
    createdAt  DateTime           @default(now())

    // FK Keys
    playlistId Int
    episodeId  Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    episode  Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([playlistId, createdAt])
    @@index([userId, createdAt])
}

model PlaylistActivityActor {
    id         Int                @id @default(autoincrement())
    actionType PlaylistActionType
    metadata   Json?
    createdAt  DateTime           @default(now())

    // FK Keys
    playlistId Int
    actorId    Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    actor    Actor    @relation(fields: [actorId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([playlistId, createdAt])
    @@index([userId, createdAt])
}

model PlaylistActivityCrew {
    id         Int                @id @default(autoincrement())
    actionType PlaylistActionType
    metadata   Json?
    createdAt  DateTime           @default(now())

    // FK Keys
    playlistId Int
    crewId     Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    crew     Crew     @relation(fields: [crewId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([playlistId, createdAt])
    @@index([userId, createdAt])
}
