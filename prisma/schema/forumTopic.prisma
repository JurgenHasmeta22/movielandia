/*
 * Forum System Capabilities Summary
 * -------------------------------
 * 
 * Core Features:
 * 1. Discussion Organization
 *    - Create, read, update, delete topics
 *    - Organize topics into categories
 *    - Tag topics for better organization
 *    - Track view counts and engagement
 *    - Pin important topics
 *    - Lock discussions when needed
 * 
 * 2. User Engagement
 *    - Post responses and replies
 *    - Upload attachments
 *    - Vote on topics/posts/replies
 *    - Bookmark favorite topics
 *    - Watch topics for updates
 *    - Track user reputation
 * 
 * 3. Content Management
 *    - Rich text content support
 *    - File attachments
 *    - Edit history tracking
 *    - Post versioning
 *    - Content moderation
 * 
 * 4. Moderation Tools
 *    - Category-specific moderators
 *    - Topic status management (Open/Closed/Archived)
 *    - Content moderation flags
 *    - User activity tracking
 * 
 * 5. Statistics & Tracking
 *    - User participation metrics
 *    - Topic engagement stats
 *    - Category activity monitoring
 *    - Vote tracking
 *    - View counting
 * 
 * Key User Actions:
 * - Create and participate in discussions
 * - Share files and media
 * - Vote and bookmark content
 * - Follow interesting topics
 * - Build reputation through engagement
 * - Moderate community content
 */

enum TopicStatus {
    Open
    Closed
    Archived
}

model ForumTopic {
    id          Int         @id @default(autoincrement())
    title       String
    content     String      @db.Text()
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    isPinned    Boolean     @default(false)
    isLocked    Boolean     @default(false)
    slug        String      @unique
    viewCount   Int         @default(0)
    lastPostAt  DateTime    @default(now())
    isModerated Boolean     @default(false)
    closedAt    DateTime?
    status      TopicStatus @default(Open)

    // FK Keys
    closedById Int?
    categoryId Int
    userId     Int

    // Relations
    closedBy             User?                    @relation("TopicCloser", fields: [closedById], references: [id])
    tags                 ForumTag[]
    category             ForumCategory            @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    user                 User                     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    posts                ForumPost[]
    usersWhoBookmarkedIt UserForumTopicFavorite[]
    upvotes              UpvoteForumTopic[]
    downvotes            DownvoteForumTopic[]
    watchers             UserForumTopicWatch[]

    @@index([title(sort: Asc)])
    @@index([createdAt])
    @@index([lastPostAt])
    @@index([isPinned])
}

model UserForumTopicWatch {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    // FK Keys
    userId  Int
    topicId Int

    // Relations
    user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    topic ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)

    @@unique([userId, topicId])
}

model UserForumTopicFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId  Int
    topicId Int

    // Relations
    user  User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    topic ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, topicId])
}

model UpvoteForumTopic {
    id Int @id @default(autoincrement())

    // FK Keys
    userId  Int
    topicId Int

    // Relations
    user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    topic ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)

    @@unique([userId, topicId])
}

model DownvoteForumTopic {
    id Int @id @default(autoincrement())

    // FK Keys
    userId  Int
    topicId Int

    // Relations
    user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    topic ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)

    @@unique([userId, topicId])
}
