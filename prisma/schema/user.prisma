// #region "User"
model User {
    id               Int      @id @default(autoincrement())
    userName         String   @unique
    email            String   @unique
    password         String?
    role             UserType @default(User)
    bio              String   @db.Text()
    active           Boolean  @default(false)
    canResetPassword Boolean  @default(false)
    subscribed       Boolean  @default(false)

    // Relations
    resetPasswordTokens ResetPasswordToken[]
    activateTokens      ActivateToken[]
    accounts            Account[]
    sessions            Session[]

    favMovies   UserMovieFavorite[]
    favSeries   UserSerieFavorite[]
    favGenres   UserGenreFavorite[]
    favSeasons  UserSeasonFavorite[]
    favEpisodes UserEpisodeFavorite[]
    favActors   UserActorFavorite[]
    favCrew     UserCrewFavorite[]

    ratingsInMovie   UserMovieRating[]
    ratingsInSerie   UserSerieRating[]
    ratingsInSeason  UserSeasonRating[]
    ratingsInEpisode UserEpisodeRating[]
    ratingsInActor   UserActorRating[]
    ratingsInCrew    UserCrewRating[]

    movieReviews   MovieReview[]
    serieReviews   SerieReview[]
    seasonReviews  SeasonReview[]
    episodeReviews EpisodeReview[]
    actorReviews   ActorReview[]
    crewReviews    CrewReview[]

    movieReviewsUpvoted     UpvoteMovieReview[]
    movieReviewsDownvoted   DownvoteMovieReview[]
    serieReviewsUpvoted     UpvoteSerieReview[]
    serieReviewsDownvoted   DownvoteSerieReview[]
    seasonReviewsUpvoted    UpvoteSeasonReview[]
    seasonReviewsDownvoted  DownvoteSeasonReview[]
    episodeReviewsUpvoted   UpvoteEpisodeReview[]
    episodeReviewsDownvoted DownvoteEpisodeReview[]
    actorReviewsUpvoted     UpvoteActorReview[]
    actorReviewsDownvoted   DownvoteActorReview[]
    crewReviewsUpvoted      UpvoteCrewReview[]
    crewReviewsDownvoted    DownvoteCrewReview[]

    avatar Avatar?

    followers UserFollow[] @relation("UserFollowing")
    following UserFollow[] @relation("UserFollowers")

    inboxes          UserInbox[]
    messagesSent     Message[]   @relation("Sender")
    messagesReceived Message[]   @relation("Receiver")

    notificationsReceived Notification[] @relation("NotificationReceiver")
    notificationsSent     Notification[] @relation("NotificationSender")

    reportedContentCreated  ReportedContent[] @relation("ReportingUser")
    reportedContentReceived ReportedContent[] @relation("ReportedUser")
    moderationLogsCreated   ModerationLog[]   @relation("ModeratorUser")
    moderationLogsTargeted  ModerationLog[]   @relation("TargetUser")

    @@index([userName(sort: Asc)])
    @@index([email])
}

model Avatar {
    id       Int    @id @default(autoincrement())
    photoSrc String

    // FK Keys
    userId Int @unique

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum UserType {
    User
    Admin
}

// #endregion

// #region "User Follow"
model UserFollow {
    id    Int         @id @default(autoincrement())
    state FollowState @default(pending)

    // FK Keys
    followerId  Int
    followingId Int

    // Relations
    follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([followerId, followingId])
}

enum FollowState {
    pending
    accepted
    rejected
}

// #endregion

// #region "User Ratings"
model UserMovieRating {
    id     Int   @id @default(autoincrement())
    rating Float

    // FK Keys
    userId  Int
    movieId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, movieId])
}

model UserSerieRating {
    id     Int   @id @default(autoincrement())
    rating Float

    // FK Keys
    userId  Int
    serieId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    serie Serie @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, serieId])
}

model UserSeasonRating {
    id     Int   @id @default(autoincrement())
    rating Float

    // FK Keys
    userId   Int
    seasonId Int

    // Relations
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    season Season @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, seasonId])
}

model UserEpisodeRating {
    id     Int   @id @default(autoincrement())
    rating Float

    // FK Keys
    userId    Int
    episodeId Int

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    episode Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, episodeId])
}

model UserActorRating {
    id     Int   @id @default(autoincrement())
    rating Float

    // FK Keys
    userId  Int
    actorId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    actor Actor @relation(fields: [actorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, actorId])
}

model UserCrewRating {
    id     Int   @id @default(autoincrement())
    rating Float

    // FK Keys
    userId Int
    crewId Int

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    crew Crew @relation(fields: [crewId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, crewId])
}

// #endregion

// #region "User Favorites"
model UserMovieFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId  Int
    movieId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, movieId])
}

model UserGenreFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId  Int
    genreId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    genre Genre @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, genreId])
}

model UserSerieFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId  Int
    serieId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    serie Serie @relation(fields: [serieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, serieId])
}

model UserEpisodeFavorite {
    id Int @id @default(autoincrement())

    // FK Keys 
    userId    Int
    episodeId Int

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    episode Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, episodeId])
}

model UserSeasonFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId   Int
    seasonId Int

    // Relations
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    season Season @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, seasonId])
}

model UserActorFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId  Int
    actorId Int

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    actor Actor @relation(fields: [actorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, actorId])
}

model UserCrewFavorite {
    id Int @id @default(autoincrement())

    // FK Keys
    userId Int
    crewId Int

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    crew Crew @relation(fields: [crewId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, crewId])
}

// #endregion
