/**
 * Playlist Models - Core entities for managing user content collections
 * Playlist System Capabilities:
 * 1. Playlist Types & Management
 * - Create custom playlists
 * - Automatic system playlists (Watchlist, Favorites, Watched)
 * - Public/Private visibility settings
 * - Archive functionality
 * - Default playlist designation
 * - Track item counts and view history
 * 2. Content Organization
 * - Add/remove multiple content types:
 * • Movies
 * • TV Series
 * • Seasons
 * • Episodes
 * • Actors
 * • Crew Members
 * - Custom ordering of items (orderIndex)
 * - Add notes to playlist items
 * - Track addition dates
 * 3. Sharing & Collaboration
 * - Share playlists with other users
 * - Control edit permissions for shared playlists
 * - Track sharing history
 * 4. Activity Tracking
 * - Log all playlist actions:
 * • Creation/Updates/Deletion
 * • Item additions/removals
 * • Sharing/Unsharing
 * - Store metadata for each action
 * - Track user responsibility for actions
 * Integration Points:
 * - User system (ownership, sharing, activity tracking)
 * - Content systems (movies, series, seasons, episodes)
 * - People systems (actors, crew)
 */

enum PlaylistActionType {
    Created
    Updated
    Deleted
    ItemAdded
    ItemRemoved
    Shared
    Unshared
}

model Playlist {
    id           Int       @id @default(autoincrement())
    name         String
    description  String?   @db.Text()
    isPrivate    Boolean   @default(false)
    isArchived   Boolean   @default(false)
    isDefault    Boolean   @default(false)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    lastViewedAt DateTime?

    // FK Keys
    userId Int

    // Relations
    user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
    movieItems        PlaylistMovie[]
    serieItems        PlaylistSerie[]
    seasonItems       PlaylistSeason[]
    episodeItems      PlaylistEpisode[]
    actorItems        PlaylistActor[]
    crewItems         PlaylistCrew[]
    sharedWith        PlaylistShare[]
    movieActivities   PlaylistActivityMovie[]
    serieActivities   PlaylistActivitySerie[]
    seasonActivities  PlaylistActivitySeason[]
    episodeActivities PlaylistActivityEpisode[]
    actorActivities   PlaylistActivityActor[]
    crewActivities    PlaylistActivityCrew[]

    @@index([userId])
    @@index([createdAt])
    @@index([isDefault])
}

model PlaylistShare {
    id       Int      @id @default(autoincrement())
    canEdit  Boolean  @default(false)
    sharedAt DateTime @default(now())

    // FK Keys
    playlistId Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([playlistId, userId])
}

model PlaylistMovie {
    id         Int      @id @default(autoincrement())
    addedAt    DateTime @default(now())
    note       String?  @db.Text()
    orderIndex Int      @default(0)

    // FK Keys
    playlistId Int
    movieId    Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    movie    Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
    user     User     @relation("AddedByUser", fields: [userId], references: [id])

    @@unique([playlistId, movieId])
    @@index([playlistId, orderIndex])
}

model PlaylistSerie {
    id         Int      @id @default(autoincrement())
    addedAt    DateTime @default(now())
    note       String?  @db.Text()
    orderIndex Int      @default(0)

    // FK Keys
    playlistId Int
    serieId    Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    serie    Serie    @relation(fields: [serieId], references: [id], onDelete: Cascade)
    user     User     @relation("AddedBySerieUser", fields: [userId], references: [id])

    @@unique([playlistId, serieId])
    @@index([playlistId, orderIndex])
}

model PlaylistSeason {
    id         Int      @id @default(autoincrement())
    addedAt    DateTime @default(now())
    note       String?  @db.Text()
    orderIndex Int      @default(0)

    // FK Keys
    playlistId Int
    seasonId   Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    season   Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
    user     User     @relation("AddedBySeasonUser", fields: [userId], references: [id])

    @@unique([playlistId, seasonId])
    @@index([playlistId, orderIndex])
}

model PlaylistEpisode {
    id         Int      @id @default(autoincrement())
    addedAt    DateTime @default(now())
    note       String?  @db.Text()
    orderIndex Int      @default(0)

    // FK Keys
    playlistId Int
    episodeId  Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    episode  Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
    user     User     @relation("AddedByEpisodeUser", fields: [userId], references: [id])

    @@unique([playlistId, episodeId])
    @@index([playlistId, orderIndex])
}

model PlaylistActor {
    id         Int      @id @default(autoincrement())
    addedAt    DateTime @default(now())
    note       String?  @db.Text()
    orderIndex Int      @default(0)

    // FK Keys
    playlistId Int
    actorId    Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    actor    Actor    @relation(fields: [actorId], references: [id], onDelete: Cascade)
    user     User     @relation("AddedByActorUser", fields: [userId], references: [id])

    @@unique([playlistId, actorId])
    @@index([playlistId, orderIndex])
}

model PlaylistCrew {
    id         Int      @id @default(autoincrement())
    addedAt    DateTime @default(now())
    note       String?  @db.Text()
    orderIndex Int      @default(0)

    // FK Keys
    playlistId Int
    crewId     Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    crew     Crew     @relation(fields: [crewId], references: [id], onDelete: Cascade)
    user     User     @relation("AddedByCrewUser", fields: [userId], references: [id])

    @@unique([playlistId, crewId])
    @@index([playlistId, orderIndex])
}

model PlaylistActivityMovie {
    id         Int                @id @default(autoincrement())
    actionType PlaylistActionType
    metadata   Json?
    createdAt  DateTime           @default(now())

    // FK Keys
    playlistId Int
    movieId    Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    movie    Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([playlistId, createdAt])
    @@index([userId, createdAt])
}

model PlaylistActivitySerie {
    id         Int                @id @default(autoincrement())
    actionType PlaylistActionType
    metadata   Json?
    createdAt  DateTime           @default(now())

    // FK Keys
    playlistId Int
    serieId    Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    serie    Serie    @relation(fields: [serieId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([playlistId, createdAt])
    @@index([userId, createdAt])
}

model PlaylistActivitySeason {
    id         Int                @id @default(autoincrement())
    actionType PlaylistActionType
    metadata   Json?
    createdAt  DateTime           @default(now())

    // FK Keys
    playlistId Int
    seasonId   Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    season   Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([playlistId, createdAt])
    @@index([userId, createdAt])
}

model PlaylistActivityEpisode {
    id         Int                @id @default(autoincrement())
    actionType PlaylistActionType
    metadata   Json?
    createdAt  DateTime           @default(now())

    // FK Keys
    playlistId Int
    episodeId  Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    episode  Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([playlistId, createdAt])
    @@index([userId, createdAt])
}

model PlaylistActivityActor {
    id         Int                @id @default(autoincrement())
    actionType PlaylistActionType
    metadata   Json?
    createdAt  DateTime           @default(now())

    // FK Keys
    playlistId Int
    actorId    Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    actor    Actor    @relation(fields: [actorId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([playlistId, createdAt])
    @@index([userId, createdAt])
}

model PlaylistActivityCrew {
    id         Int                @id @default(autoincrement())
    actionType PlaylistActionType
    metadata   Json?
    createdAt  DateTime           @default(now())

    // FK Keys
    playlistId Int
    crewId     Int
    userId     Int

    // Relations
    playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    crew     Crew     @relation(fields: [crewId], references: [id], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([playlistId, createdAt])
    @@index([userId, createdAt])
}
