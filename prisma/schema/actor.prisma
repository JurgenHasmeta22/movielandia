model Actor {
    id                   Int                   @id @default(autoincrement())
    fullname             String
    role                 String                @default("Actor")
    photoSrc             String                @default("")
    photoSrcProd         String                @default("")
    description          String                @default("")
    debut                String                @default("")
    starredMovies        CastMovie[]
    starredSeries        CastSerie[]
    reviews              ActorReview[]
    usersWhoRatedIt      UserActorRating[]
    usersWhoBookmarkedIt UserActorFavorite[]
    upvoteActorReviews   UpvoteActorReview[]
    downvoteActorReviews DownvoteActorReview[]
}

model ActorReview {
    id        Int                   @id @default(autoincrement())
    content   String                @default("")
    rating    Float?
    createdAt DateTime              @default(now())
    updatedAt DateTime?
    userId    Int
    actorId   Int
    user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    actor     Actor                 @relation(fields: [actorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    upvotes   UpvoteActorReview[]
    downvotes DownvoteActorReview[]
}

model UpvoteActorReview {
    id            Int          @id @default(autoincrement())
    userId        Int
    actorId       Int
    actorReviewId Int
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    actor         Actor        @relation(fields: [actorId], references: [id], onDelete: Cascade)
    actorReview   ActorReview? @relation(fields: [actorReviewId], references: [id], onDelete: Cascade)
}

model DownvoteActorReview {
    id            Int          @id @default(autoincrement())
    userId        Int
    actorId       Int
    actorReviewId Int
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    actor         Actor        @relation(fields: [actorId], references: [id], onDelete: Cascade)
    actorReview   ActorReview? @relation(fields: [actorReviewId], references: [id], onDelete: Cascade)
}