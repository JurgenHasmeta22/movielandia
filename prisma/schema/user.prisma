enum UserType {
    User
    Admin
}

enum FollowState {
    pending
    accepted
    rejected
}

model User {
    id               Int      @id @default(autoincrement())
    userName         String   @unique
    email            String   @unique
    password         String?
    role             UserType @default(User)
    bio              String   @db.Text()
    active           Boolean  @default(false)
    canResetPassword Boolean  @default(false)
    subscribed       Boolean  @default(false)

    // Auth Relations
    resetPasswordTokens ResetPasswordToken[]
    activateTokens      ActivateToken[]
    accounts            Account[]
    sessions            Session[]

    // Content Favorites Relations
    favMovies   UserMovieFavorite[]
    favSeries   UserSerieFavorite[]
    favGenres   UserGenreFavorite[]
    favSeasons  UserSeasonFavorite[]
    favEpisodes UserEpisodeFavorite[]
    favActors   UserActorFavorite[]
    favCrew     UserCrewFavorite[]
    playlists   Playlist[]

    // Ratings Relations
    ratingsInMovie   UserMovieRating[]
    ratingsInSerie   UserSerieRating[]
    ratingsInSeason  UserSeasonRating[]
    ratingsInEpisode UserEpisodeRating[]
    ratingsInActor   UserActorRating[]
    ratingsInCrew    UserCrewRating[]

    // Reviews Relations
    movieReviews   MovieReview[]
    serieReviews   SerieReview[]
    seasonReviews  SeasonReview[]
    episodeReviews EpisodeReview[]
    actorReviews   ActorReview[]
    crewReviews    CrewReview[]

    // Review Interactions Relations
    movieReviewsUpvoted     UpvoteMovieReview[]
    movieReviewsDownvoted   DownvoteMovieReview[]
    serieReviewsUpvoted     UpvoteSerieReview[]
    serieReviewsDownvoted   DownvoteSerieReview[]
    seasonReviewsUpvoted    UpvoteSeasonReview[]
    seasonReviewsDownvoted  DownvoteSeasonReview[]
    episodeReviewsUpvoted   UpvoteEpisodeReview[]
    episodeReviewsDownvoted DownvoteEpisodeReview[]
    actorReviewsUpvoted     UpvoteActorReview[]
    actorReviewsDownvoted   DownvoteActorReview[]
    crewReviewsUpvoted      UpvoteCrewReview[]
    crewReviewsDownvoted    DownvoteCrewReview[]

    // Social Relations
    avatar           Avatar?
    followers        UserFollow[] @relation("UserFollowing")
    following        UserFollow[] @relation("UserFollowers")
    inboxes          UserInbox[]
    messagesSent     Message[]    @relation("Sender")
    messagesReceived Message[]    @relation("Receiver")

    // Notification Relations
    notificationsReceived Notification[] @relation("NotificationReceiver")
    notificationsSent     Notification[] @relation("NotificationSender")

    // Forum Relations
    forumTopics              ForumTopic[]
    forumPosts               ForumPost[]
    forumReplies             ForumReply[]
    forumTopicUpvotes        UpvoteForumTopic[]
    forumTopicDownvotes      DownvoteForumTopic[]
    forumPostUpvotes         UpvoteForumPost[]
    forumPostDownvotes       DownvoteForumPost[]
    forumReplyUpvotes        UpvoteForumReply[]
    forumReplyDownvotes      DownvoteForumReply[]
    forumTopicsBookmarked    UserForumTopicFavorite[]
    forumTopicsWatched       UserForumTopicWatch[]
    forumModeratedCategories UserForumModerator[]
    attachments              Attachment[]
    // Moderation Relations
    reportedContentCreated   ReportedContent[]        @relation("ReportingUser")
    reportedContentReceived  ReportedContent[]        @relation("ReportedUser")
    moderationLogsCreated    ModerationLog[]          @relation("ModeratorUser")
    moderationLogsTargeted   ModerationLog[]          @relation("TargetUser")
    forumStats               ForumUserStats?
    topicsClosed             ForumTopic[]         @relation("TopicCloser")
    postsAnswered            ForumPost[]          @relation("PostAnswerer")
    postsEdited              ForumPostHistory[]   @relation("PostEditor")
    repliesEdited            ForumReplyHistory[]  @relation("ReplyEditor")
    postsDeleted             ForumPost[]          @relation("PostDeleter")

    @@index([userName(sort: Asc)])
    @@index([email])
}

model Avatar {
    id       Int    @id @default(autoincrement())
    photoSrc String

    // FK Keys
    userId Int @unique

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserFollow {
    id    Int         @id @default(autoincrement())
    state FollowState @default(pending)

    // FK Keys
    followerId  Int
    followingId Int

    // Relations
    follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([followerId, followingId])
}

model ForumUserStats {
    id              Int      @id @default(autoincrement())
    userId          Int      @unique
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    topicCount      Int      @default(0)
    postCount       Int      @default(0)
    replyCount      Int      @default(0)
    upvotesReceived Int      @default(0)
    reputation      Int      @default(0)
    lastPostAt      DateTime?
}
